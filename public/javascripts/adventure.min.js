jQuery(function($) {
	var prefs = {
		base_article_url: "http://www.cnn.com/2012/04/12/business/greece-election-explainer",
		related_api: "https://ajax.googleapis.com/ajax/services/search/news",
		scrape_api: "http://newsquest.me/NYOA/api/article/info",
		desolver_api: "http://newsquest.me/NYOA/api/arkref/resolve",
		question_api: "http://newsquest.me/NYOA/api/QuestionGeneration/questions",
		paragraph_min: 40,
		paragraph_max: 3000
	}
	if(typeof window.newsquest_prefs != 'undefined')
		$.extend(prefs, window.newsquest_prefs);
	
	function Paragraph() {
		this.questions = Array();
		this.text = "";
		this.used = false;
		this.article = null;
	}
	
	function Article(url, callback) {
		// Set up the object
		this.paragraphs = Array();
		
		// Load the base article content
		this.url = url;
		this.title = "";
		this.text = "";
		$.ajax({
			context: this,
			data: {
				url: url
			},
			dataType: "xml",
			error: function(jqXHR, textStatus, errorThrown) {
				console.log(errorThrown);
			},
			type: "get",
			success: function(data, textStatus, jqXHR) {
				data = $(data).find("extractor");
				this.title = data.find("title").text();
				this.text = data.find("text").text();
				
				// Break into paragraphs
				var parsedParagraphs = this.text.split("\n");
				for(var x in parsedParagraphs) {
					if(parsedParagraphs[x].length < prefs.paragraph_min || parsedParagraphs[x].length > prefs.paragraph_max)
						continue;
						
					var paragraph = new Paragraph();
					paragraph.text = parsedParagraphs[x];
					paragraph.article = this;
					this.paragraphs.push(paragraph);
				}
				
				// Load article questions
				console.log("Loading questions for " + this.url);
				$.ajax({
					context: this,
					data: {
						text: this.text
					},
					dataType: "text",
					error: function(jqXHR, textStatus, errorThrown) {
						console.log(errorThrown);
					},
					type: "post",
					success: function(data, textStatus, jqXHR) {
						var questions = data.split("\n");
						
						for(var x in questions) {
							var parts = questions[x].split("\t");
							
							// Find the paragraph with this question
							for(var y in this.paragraphs) {
								if(this.paragraphs[y].text.search(parts[1]) != -1) {
									this.paragraphs[y].questions.push(parts);
									break;
								}
							}
							
						}
						
						// We're all done, run the callback
						if(callback)
							callback();
					},
					url: prefs.question_api
				});
			},
			url: prefs.scrape_api
		});
	}
	
	function loadRelatedArticles() {
		console.log("Looking up related articles");
		$.ajax({
			data: {
				v: '1.0',
				q: prime_article.title,
				rsz: 8
			},
			dataType: "jsonp",
			error: function(jqXHR, textStatus, errorThrown) {
				console.log(errorThrown);
			},
			type: "get",
			success: function(data, textStatus, jqXHR) {
				if(data.responseStatus != 200)
					return;
				for(x in data.responseData.results)
					articles.push(new Article(data.responseData.results[x].unescapedUrl, articleCountdown));
			},
			url: prefs.related_api
		});
	}
	
	var loadCount = 0;
	var initialized = false;
	function articleCountdown() {
		console.log(loadCount);
		if(loadCount++ > 3 && initialized == false) {
			console.log("Ready to rock");
			
			initialized = true;
			
			// Render fist paragraph
			initialize(articles[0].paragraphs[0]);
		}
	}
	
	// Set up the first article
	console.log("Loading the article");
	var articles = Array();
	var prime_article = new Article(prefs.base_article_url, loadRelatedArticles)
	articles.push(prime_article);
	
	// For each article:
	// Get the base text (Laurian)
	// Run the reference desolver (Laurian)
	// Get the list of questions (Laurian)
	
	// Find which paragraphs contain each question
	// Build the paragraph network
	
	
	function randomParagraph() {
		var paragraph;
		while(!paragraph) {
			var articleIndex = Math.floor(Math.random() * articles.length);
			var paragraphIndex = Math.floor(Math.random() * articles[articleIndex].paragraphs.length);
			paragraph = articles[articleIndex].paragraphs[paragraphIndex];
			if(!paragraph || paragraph.questions.length == 0  || paragraph.questions[0][0] == "" || paragraph.questions[0][0]=="Who has viewed your allowance of free articles?")
				paragraph = null;
		}
		return paragraph;
	}
	
	// UX Methods
	function initialize(first) {
		var paragraphA = randomParagraph();
		var paragraphB = randomParagraph();
		
		renderChapter(first, paragraphA, paragraphB);
	}
	
	function nextChapter(current, dom_object) {
		// Pick two new questions
		var paragraphA = randomParagraph();
		var paragraphB = randomParagraph();
		
		$(dom_object).unbind();
		$(dom_object).parents('.question').next().children().unbind();
		
		// Hide Share + Stats links
		
		// Add margin to current Chapter
		//$(dom_object).parents('.container').css('margin-bottom','15%');
		
		// Reveal next Chapter
		$(dom_object).parents('.container').next().css('visibility','visible');
		
		// Dim previous Chapter
		$(dom_object).parents('.container').animate({ 
			opacity: 0.4,
		}, 'fast');
		
		renderChapter(current, paragraphA, paragraphB);
		
		// Scroll whole story up to center next Chapter
		$.scrollTo($(dom_object).siblings('.options'));
	}
	
	function renderChapter(current, paragraphA, paragraphB) {
		// Render active paragraph + question A and question B
		// Do the animation to set up next chapter
		// Disable old Question buttons
		
		var template = $("#template");
		var container = template.clone();
		container.attr("id","");
		container.find("p").html(current.text);
		var q1 = container.find(".question")[0];
		var q2 = container.find(".question")[1];
		
		$.data(q1, "paragraph", paragraphA);
		$.data(q2, "paragraph", paragraphB);
		
		$(container.find(".question")[0]).html("<a>" + paragraphA.questions[0][0] + "</a>");
		$(container.find(".question")[1]).html("<a>" + paragraphB.questions[0][0] + "</a>");
		$("body").append(container);
		container.fadeIn(200);
		
		// bind click events to questions
		$(container).find('.question').click(function() { console.log($(this).data("paragraph")); nextChapter($(this).data("paragraph"), this) });
	}
});