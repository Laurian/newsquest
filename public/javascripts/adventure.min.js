jQuery(function($) {
	var ARTICLE_CALLBACK_CONTENT = "content";
	var ARTICLE_CALLBACK_QUESTIONS = "questions";
	
	var prefs = {
		base_article_url: "http://www.cnn.com/2012/04/12/business/greece-election-explainer",
		related_api: "https://ajax.googleapis.com/ajax/services/search/news",
		api: "http://localhost:3000/api",
		paragraph_min: 40,
		paragraph_max: 3000
	}
	if(typeof window.newsquest_prefs != 'undefined')
		$.extend(prefs, window.newsquest_prefs);
	
	function codify(str) {
		return str.replace(/[^A-Za-z0-9]/g, "");
	}
	
	function Paragraph() {
		this.questions = Array();
		this.text = "";
		this.code = "";
		this.used = false;
		this.article = null;
	}
	
	function Article(url, callback) {
		// Set up the object
		this.paragraphs = Array();
		
		// Load the base article content
		this.id = "";
		this.url = url;
		this.title = "";
		this.text = "";
		
		this.load = function(article) {
			this.id = article._id;
			this.title = article.title;
			this.text = article.paragraphs.join("\n");
			
			// Create Paragraph Objects
			for(var x in article.paragraphs) {
				var paragraph = new Paragraph();
				paragraph.text = article.paragraphs[x];
				paragraph.code = codify(paragraph.text);
				paragraph.article = this;
				this.paragraphs.push(paragraph);
			}
			
			if(callback) callback(this, ARTICLE_CALLBACK_CONTENT);
		};
		
		this.linkQuestions = function(questions) {
			for(var x in questions) {
				var question = questions[x];
				// Find the paragraph with this question
				for(var y in this.paragraphs) {
					if(this.paragraphs[y].code.indexOf(codify(question.answer)) != -1) {
						this.paragraphs[y].questions.push(question);
						break;
					}
				}
			}
			
			if(callback) callback(this, ARTICLE_CALLBACK_QUESTIONS);
		}
		
				
		this.loadQuestions = function() {
			// Load article questions
			$.ajax({
				context: this,
				data: {
					article: this.id
				},
				dataType: "json",
				error: function(jqXHR, textStatus, errorThrown) {
					console.log(errorThrown);
				},
				type: "get",
				success: function(questions, textStatus, jqXHR) {
					if(questions.length == 0) { // Questions doesn't exist for this article
						$.ajax({
							context: this,
							data: {
								a: this.id
							},
							dataType: "json",
							error: function(jqXHR, textStatus, errorThrown) {
								console.log(errorThrown);
							},
							type: "post",
							success: function(ids, textStatus, jqXHR) {
								$.ajax({
									context: this,
									data: {
										article: this.id
									},
									dataType: "json",
									error: function(jqXHR, textStatus, errorThrown) {
										console.log(errorThrown);
									},
									type: "get",
									success: function(questions, textStatus, jqXHR) {
										this.linkQuestions(questions);
									},
									url: prefs.api + "/questions"
								});
							},
							url: prefs.api + "/questions"
						});
						return;
					}
					this.linkQuestions(questions);
				},
				url: prefs.api + "/questions"
			});
		}
		
		$.ajax({
			context: this,
			data: {
				url: url
			},
			dataType: "json",
			error: function(jqXHR, textStatus, errorThrown) {
				console.log(errorThrown);
			},
			type: "get",
			success: function(data, textStatus, jqXHR) {
				if(data.length == 0) { // Article doesn't exist in the system
					$.ajax({
						context: this,
						data: {
							l: url
						},
						dataType: "json",
						error: function(jqXHR, textStatus, errorThrown) {
							console.log(errorThrown);
						},
						type: "post",
						success: function(id, textStatus, jqXHR) {
							$.ajax({
								context: this,
								data: {},
								dataType: "json",
								error: function(jqXHR, textStatus, errorThrown) {
									console.log(errorThrown);
								},
								type: "get",
								success: function(data, textStatus, jqXHR) {
									this.load(data[0]);
								},
								url: prefs.api + "/articles/" + id
							});
						},
						url: prefs.api + "/articles"
					});
					return;
				}
				
				this.load(data[0]);
			},
			url: prefs.api + "/articles"
		});
	}
	
	function loadRelatedArticles() {
		$.ajax({
			data: {
				v: '1.0',
				q: prime_article.title,
				rsz: 8
			},
			dataType: "jsonp",
			error: function(jqXHR, textStatus, errorThrown) {
				console.log(errorThrown);
			},
			type: "get",
			success: function(data, textStatus, jqXHR) {
				if(data.responseStatus != 200)
					return;
				for(x in data.responseData.results)
					articles.push(new Article(data.responseData.results[x].unescapedUrl, articleCallback));
			},
			url: prefs.related_api
		});
	}
	
	var loadCount = 0;
	var initialized = false;
	function articleCallback(article, code) {
		switch(code) {
			case ARTICLE_CALLBACK_CONTENT:
				article.loadQuestions();
				break;
			case ARTICLE_CALLBACK_QUESTIONS:
				if(loadCount++ > 3 && initialized == false) {
					initialized = true;
					
				 	// Render fist paragraph
					initialize(articles[0].paragraphs[0]);
				}
				break;
		}
	}
	
	// Set up the first article
	var articles = Array();
	var prime_article = new Article(prefs.base_article_url, loadRelatedArticles)
	articles.push(prime_article);
	
	function randomParagraph() {
		var paragraph;
		while(!paragraph) {
			var articleIndex = Math.floor(Math.random() * articles.length);
			var paragraphIndex = Math.floor(Math.random() * articles[articleIndex].paragraphs.length);
			paragraph = articles[articleIndex].paragraphs[paragraphIndex];
			if(!paragraph || paragraph.questions.length == 0)
				paragraph = false;
		}
		return paragraph;
	}
	
	
	// UX Methods
	function initialize(first) {
		var paragraphA = randomParagraph();
		var paragraphB = randomParagraph();
		
		renderChapter(first, paragraphA, paragraphB);
	}
	
	function nextChapter(current, dom_object) {
		// Pick two new questions
		var paragraphA = randomParagraph();
		var paragraphB = randomParagraph();
		
		$(dom_object).unbind();
		$(dom_object).parents('.question').next().children().unbind();
		
		// Reveal next Chapter
		$(dom_object).parents('.container').next().css('visibility','visible');
		
		// Dim previous Chapter
		$(dom_object).parents('.container').animate({ 
			opacity: 0.4,
		}, 'fast');
		
		renderChapter(current, paragraphA, paragraphB);
		
		// Scroll whole story up to center next Chapter
		$.scrollTo($(dom_object).siblings('.options'));
	}
	
	function renderChapter(current, paragraphA, paragraphB) {
		// Render active paragraph + question A and question B
		// Do the animation to set up next chapter
		// Disable old Question buttons
		
		var template = $("#template");
		var container = template.clone();
		container.attr("id","");
		container.find("p").html(current.text);
		var q1 = container.find(".question")[0];
		var q2 = container.find(".question")[1];
		
		$.data(q1, "paragraph", paragraphA);
		$.data(q2, "paragraph", paragraphB);
		
		$(container.find(".question")[0]).html("<a>" + paragraphA.questions[0].question + "</a>");
		$(container.find(".question")[1]).html("<a>" + paragraphB.questions[0].question + "</a>");
		$("body").append(container);
		container.fadeIn(200);
		
		// bind click events to questions
		$(container).find('.question').click(function() { console.log($(this).data("paragraph")); nextChapter($(this).data("paragraph"), this) });
	}
});